
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СформироватьДвижения(); 
		
	СформироватьСторноЗаписи();
		
	Движения.ВКМ_ОсновныеНачисления.Записать();
	Движения.ВКМ_Удержания.Записать();
	
	РассчитатьОклад();
	
	РассчитатьПроцентОтРабот();
	
	Ответ = РассчитатьОтпуск();
	
	Если Ответ Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		РассчитатьНДФЛ();
	
		РассчитатьВзаиморасчеты();
	КонецЕсли;
		
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвижения()
		
	Для Каждого Строка Из ОсновныеНачисления Цикл
					
		Если ТипЗнч(Строка.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ВКМ_ОсновныеНачисления") Тогда
			Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
			Движение.ПериодРегистрации = НачалоМесяца(Дата);
			Движение.ПериодДействияНачало = НачалоМесяца(Дата);
			Движение.ПериодДействияКонец = КонецМесяца(Дата);
			Движение.ВидРасчета = Строка.ВидРасчета;
			Движение.Сотрудник = Строка.Сотрудник;
			Движение.График = Строка.ГрафикРаботы;
						
			Если Строка.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
				
				ПериодРегистрации = НачалоМесяца(Дата);
				НачалоБазовогоПериода = ДобавитьМесяц(ПериодРегистрации, -12);
				КонецБазовогоПериода = ПериодРегистрации - 1;
	
				Движение.БазовыйПериодНачало = НачалоБазовогоПериода;
				Движение.БазовыйПериодКонец = КонецБазовогоПериода;
				
			КонецЕсли;
			
			Движение = Движения.ВКМ_Удержания.Добавить();
			Движение.ПериодРегистрации = НачалоМесяца(Дата);				
			Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
			Движение.Сотрудник = Строка.Сотрудник;
						
		КонецЕсли;
			
	КонецЦикла;
					
КонецПроцедуры

Процедура СформироватьСторноЗаписи()
	
	СторноЗаписи = Движения.ВКМ_ОсновныеНачисления.ПолучитьДополнение();
	
	Для Каждого Запись Из СторноЗаписи Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
		Движение.ПериодРегистрации = Дата;
		Движение.ПериодДействияНачало = Запись.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец = Запись.ПериодДействияКонецСторно;
		Движение.Результат = 0;
		Движение.Сотрудник = Запись.Сотрудник;
		Движение.ВидРасчета = Запись.ВидРасчета;
		Движение.График = Запись.График;
		Движение.Сторно = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьОклад()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	ОсновныеНачисленияДанныеГрафика.РабочихДнейПериодДействия КАК План,
	|	ОсновныеНачисленияДанныеГрафика.РабочихДнейФактическийПериодДействия КАК Факт,
	|	ЕСТЬNULL(СведенияОСотрудникахСрезПоследних.Оклад, 0) КАК Оклад,
	|	СведенияОСотрудникахСрезПоследних.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(Регистратор = &Ссылка
	|	И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияДанныеГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период,) КАК
	|			СведенияОСотрудникахСрезПоследних
	|		ПО ОсновныеНачисленияДанныеГрафика.Сотрудник = СведенияОСотрудникахСрезПоследних.Сотрудник";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		
		Если Выборка.План = 0 Тогда
			Движение.Результат = 0;
		Иначе
			Движение.Результат = (Выборка.Оклад * Выборка.Факт / Выборка.План);
		КонецЕсли;
		
		Если Движение.Сторно Тогда
			Движение.Результат = - Движение.Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПроцентОтРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.НомерСтроки КАК НомерСтроки,
	|	ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник,
	|	СУММА(ЕСТЬNULL(ВКМ_ВыполненныеСотрудникомРаботыОбороты.СуммаКОплатеОборот, 0)) КАК ПроцентОтРабот
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВКМ_ВыполненныеСотрудникомРаботы.Обороты(&ДатаНачала, &ДатаОкончания,
	|			Регистратор,) КАК ВКМ_ВыполненныеСотрудникомРаботыОбороты
	|		ПО ОсновныеНачисления.Сотрудник = ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Ссылка
	|	И ОсновныеНачисления.ВидРасчета = &ВидРасчета
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.НомерСтроки,
	|	ВКМ_ВыполненныеСотрудникомРаботыОбороты.Сотрудник";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.ВыплатаПроцентом);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.Результат = Выборка.ПроцентОтРабот;
		
		Если Движение.Сторно Тогда
			Движение.Результат = - Движение.Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьОтпуск()
	
	Ответ = Ложь;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(ОсновныеНачисленияБазаОсновныеНачисления.РезультатБаза, 0) +
	|		ЕСТЬNULL(ОсновныеНачисленияБазаДополнительныеНачисления.Результат, 0)) КАК БазаНачислений,
	|	МАКСИМУМ(ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.РабочихДнейБазовыйПериод, 0)) КАК БазаДней,
	|	СУММА(ЕСТЬNULL(ВКМ_ГрафикОтпусковСрезПервых.КоличествоДней, 0)) КАК ДнейОтпуска,
	|	ВКМ_ГрафикОтпусковСрезПервых.ДатаНачала,
	|	ВКМ_ГрафикОтпусковСрезПервых.ДатаОкончания,
	|	РАЗНОСТЬДАТ(ВКМ_ГрафикОтпусковСрезПервых.ДатаНачала, ВКМ_ГрафикОтпусковСрезПервых.ДатаОкончания, Месяц) КАК
	|		КоличествоПериодов
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(Регистратор = &Регистратор
	|	И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияДанныеГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(&Измерения, &Измерения,,
	|			Регистратор = &Регистратор
	|		И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияБазаОсновныеНачисления
	|		ПО ОсновныеНачисленияДанныеГрафика.НомерСтроки = ОсновныеНачисленияБазаОсновныеНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ДополнительныеНачисления(&Измерения, &Измерения,,
	|			Регистратор = &Регистратор
	|		И ВидРасчета = &ВидРасчета) КАК ОсновныеНачисленияБазаДополнительныеНачисления
	|		ПО ОсновныеНачисленияДанныеГрафика.НомерСтроки = ОсновныеНачисленияБазаДополнительныеНачисления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_ГрафикОтпусков.СрезПервых(&Дата,) КАК ВКМ_ГрафикОтпусковСрезПервых
	|		ПО ОсновныеНачисленияДанныеГрафика.Сотрудник = ВКМ_ГрафикОтпусковСрезПервых.Сотрудник
	|		И ОсновныеНачисленияДанныеГрафика.ПериодРегистрации <= ВКМ_ГрафикОтпусковСрезПервых.ДатаНачала
	|		И МЕСЯЦ(ОсновныеНачисленияДанныеГрафика.ПериодРегистрации) = МЕСЯЦ(ВКМ_ГрафикОтпусковСрезПервых.ДатаНачала)
	|		И Год(ОсновныеНачисленияДанныеГрафика.ПериодРегистрации) = Год(ВКМ_ГрафикОтпусковСрезПервых.ДатаНачала)
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияДанныеГрафика.НомерСтроки,
	|	ВКМ_ГрафикОтпусковСрезПервых.ДатаНачала,
	|	ВКМ_ГрафикОтпусковСрезПервых.ДатаОкончания";
	
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
	
	Измерения = Новый Массив;
	Измерения.Добавить("Сотрудник");
	
	Запрос.УстановитьПараметр("Измерения", Измерения);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Результат = Запрос.Выполнить();
			
	Выборка = Результат.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		
		Если Выборка.ДнейОтпуска > 0 Тогда			
			Движение.ПериодДействияНачало = НачалоДня(Выборка.ДатаНачала);
			Движение.ПериодДействияКонец = КонецДня(Выборка.ДатаОкончания);
				
			Движение.Результат = (Выборка.ДнейОтпуска * Выборка.БазаНачислений / Выборка.БазаДней) ;
				
			Если Движение.Сторно Тогда
				Движение.Результат = - Движение.Результат;
			КонецЕсли;
		Иначе
			СтрокаСообщения = СтрШаблон("В строке %1 по сотруднику %2 не заполнен график отпусков."
					, Выборка.НомерСтроки
					, Движение.Сотрудник);
		
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрокаСообщения; 
			Сообщение.Сообщить();   
		
			Ответ = Истина;
		КонецЕсли;		
	КонецЦикла;
	
	Если Не Ответ Тогда	
		Движения.ВКМ_ОсновныеНачисления.Записать(, Ложь);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Процедура РассчитатьНДФЛ()
	
	Для каждого Запись ИЗ Движения.ВКМ_ОсновныеНачисления Цикл
		
		Движение = Движения.ВКМ_Удержания[Запись.НомерСтроки - 1];
		Движение.Результат = Запись.Результат / 100 * 13;
		
		Если Движение.Сторно Тогда
			Движение.Результат = - Движение.Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ВКМ_Удержания.Записать(, Истина);
	
КонецПроцедуры

Процедура РассчитатьВзаиморасчеты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	ОсновныеНачисления.Результат КАК Результат
	|ПОМЕСТИТЬ Вт_Начисления
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Сотрудник,
	|	-Удержания.Результат
	|ИЗ
	|	РегистрРасчета.ВКМ_Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПериодРегистрации КАК период,
	|	Вт_Начисления.Сотрудник КАК Сотрудник,
	|	СУММА(Вт_Начисления.Результат) КАК Сумма
	|ИЗ
	|	Вт_Начисления КАК Вт_Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_Начисления.Сотрудник";
			
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(Дата));
	
	Результат = Запрос.Выполнить();
		
	Выборка = Результат.Выбрать();
		
	Пока Выборка.Следующий() Цикл 
		 Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.ДобавитьПриход();
		 Движение.Период = НачалоМесяца(Дата);
		 Движение.Сотрудник = Выборка.Сотрудник;
		 Движение.Сумма = Выборка.Сумма;
	КонецЦикла;
		
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли